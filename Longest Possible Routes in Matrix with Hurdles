//{ Driver Code Starts
import java.io.*;
import java.util.*;


class IntArray
{
    public static int[] input(BufferedReader br, int n) throws IOException
    {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = Integer.parseInt(s[i]);
        
        return a;
    }
    
    public static void print(int[] a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
    
    public static void print(ArrayList<Integer> a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
}


class IntMatrix
{
    public static int[][] input(BufferedReader br, int n, int m) throws IOException
    {
        int[][] mat = new int[n][];
        
        for(int i = 0; i < n; i++)
        {
            String[] s = br.readLine().trim().split(" ");
            mat[i] = new int[s.length];
            for(int j = 0; j < s.length; j++)
                mat[i][j] = Integer.parseInt(s[j]);
        }
        
        return mat;
    }
    
    public static void print(int[][] m)
    {
        for(var a : m)
        {
            for(int e : a)
                System.out.print(e + " ");
            System.out.println();
        }
    }
    
    public static void print(ArrayList<ArrayList<Integer>> m)
    {
        for(var a : m)
        {
            for(int e : a)
                System.out.print(e + " ");
            System.out.println();
        }
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0){
            
            int[] a = IntArray.input(br, 2);
            
            
            int[] b = IntArray.input(br, 4);
            
            
            int[][] mat = IntMatrix.input(br, a[0], a[1]);
            
            Solution obj = new Solution();
            int res = obj.longestPath(mat,a[0],a[1],b[0],b[1],b[2],b[3]);
            
            System.out.println(res);
            
        }
    }
}

// } Driver Code Ends




class Solution {
    static int maxLength;
    public static int longestPath(int[][] mat,int n,int m,int xs,int ys,int xd,int yd) {
        // code here
        maxLength=Integer.MIN_VALUE;
        boolean vis[][] = new boolean[n][m];
        //System.out.println(xs+" "+ys+" "+xd+" "+yd+" "+n+" "+m);
        if(mat[xs][ys]==0)
        {
            return -1;
        }
        solve(mat,n,m,xs,ys,xd,yd,0, vis);
        return maxLength==Integer.MIN_VALUE? -1: maxLength;
    }
    public static void solve(int[][] mat,int n,int m,int xs,int ys,int xd,int yd,
        int steps, boolean vis[][])
    {
        if(xs==xd && ys==yd)
        {
            //System.out.println(steps);
            maxLength=Math.max(steps, maxLength);
            return;
        }
      
        if(!vis[xs][ys])
        {
            //System.out.println(xs+" "+ys);
            
            int x[]={-1, 0, 1, 0};
            int y[]={ 0, 1, 0, -1};
            for(int i=0;i<4;i++)
            {
                vis[xs][ys] = true;
                if(xs+x[i]>=0 && ys+y[i]>=0 && xs+x[i]<n &&ys+y[i]<m &&mat[xs+x[i]][ys+y[i]]!=0)
                {

                    solve(mat, n,m,xs+x[i], ys+y[i], xd, yd, steps+1, vis);
                }
                 vis[xs][ys]=false;
            }
           
        }
        
    }
}
               
