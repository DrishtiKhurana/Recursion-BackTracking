Time Complexity: Exponential in nature since we are trying out all ways, to be precise its O(N! * N).

Space Complexity: O( N2 )
class Solution {
    public List<List<String>> solveNQueens(int n) {

        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                board[i][j] = '.';
        List < List < String >> res = new ArrayList < List < String >> ();

          solveNQueens(board, res, 0);
        return res;
        
    }

     public void solveNQueens(char[][]chess,List < List < String >> res,int row) {

       if(row==chess.length){
           res.add(construct(chess));
            return;
        }      

        for(int col=0;col<chess[0].length;col++){

             if(isItSafe(chess,row,col)){

                 chess[row][col]='Q';
                 solveNQueens(chess,res,row+1);
                  chess[row][col]='.';
             }

        }
    }




  static List < String > construct(char[][] chess) {
        List < String > res = new ArrayList < String > ();
        for (int i = 0; i < chess.length; i++) {
            String s = new String(chess[i]);
            res.add(s);
        }
        return res;
    }
  public boolean isItSafe(char[][]chess,int row,int col){
      //upwards
      for(int i=row-1,j=col;i>=0;i--){

          if(chess[i][j]=='Q'){
            return false;
          }
      }
//leftdiagonal
       for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){

          if(chess[i][j]=='Q'){
            return false;
          }
      }

      //rightdiagonal
       for(int i=row-1,j=col+1;i>=0 && j<chess.length;i--,j++){

          if(chess[i][j]=='Q'){
            return false;
          }
      }

return true;

  }

}
