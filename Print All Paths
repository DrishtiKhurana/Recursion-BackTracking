//{ Driver Code Starts
import java.io.*;
import java.util.*;


class IntArray
{
    public static int[] input(BufferedReader br, int n) throws IOException
    {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = Integer.parseInt(s[i]);
        
        return a;
    }
    
    public static void print(int[] a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
    
    public static void print(ArrayList<Integer> a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
}


class IntMatrix
{
    public static int[][] input(BufferedReader br, int n, int m) throws IOException
    {
        int[][] mat = new int[n][];
        
        for(int i = 0; i < n; i++)
        {
            String[] s = br.readLine().trim().split(" ");
            mat[i] = new int[s.length];
            for(int j = 0; j < s.length; j++)
                mat[i][j] = Integer.parseInt(s[j]);
        }
        
        return mat;
    }
    
    public static void print(int[][] m)
    {
        for(var a : m)
        {
            for(int e : a)
                System.out.print(e + " ");
            System.out.println();
        }
    }
    
    public static void print(ArrayList<ArrayList<Integer>> m)
    {
        for(var a : m)
        {
            for(int e : a)
                System.out.print(e + " ");
            System.out.println();
        }
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0){
            
            int[] a = IntArray.input(br, 2);
            
            
            int[][] grid = IntMatrix.input(br, a[0], a[1]);
            
            Solution obj = new Solution();
            ArrayList<ArrayList<Integer>> res = obj.findAllPossiblePaths(a[0],a[1], grid);
            
            IntMatrix.print(res);
            
        }
    }
}

// } Driver Code Ends


class Solution {
    public static ArrayList<ArrayList<Integer>> findAllPossiblePaths(int n,int m, int[][] grid) {
      int vis[][] = new int[n][m];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        vis[i][j] = 0;
      }
    }
    int di[] = {+1,0};
    int dj[] = {0,1};
    ArrayList<ArrayList<Integer>> ans = new ArrayList < > ();
    ArrayList<Integer> temp = new ArrayList < > ();
     solve(0, 0, grid, n,m, ans,temp, vis, di, dj);
    return ans;
    }
    
     private static void solve(int i, int j, int a[][], int n, int m,ArrayList<ArrayList<Integer>> ans, ArrayList<Integer> temp,
    int vis[][], int di[], int dj[]) {
    if (i == n - 1 && j == m - 1) {
         temp.add(a[i][j]);
      ans.add(new ArrayList<>(temp));
       temp.remove(temp.size()-1);
      return;
    }
    String dir = "DR";
    for (int ind = 0; ind < 2; ind++) {
      int nexti = i + di[ind];
      int nextj = j + dj[ind];
      
      if (nexti >= 0 && nextj >= 0 && nexti < n && nextj < m &&
        vis[nexti][nextj] == 0 ) {
       
       temp.add(a[i][j]);
        vis[i][j] = 1;
        solve(nexti, nextj, a, n,m, ans, temp, vis, di, dj);
        vis[i][j] = 0;
        temp.remove(temp.size()-1);

      }
    }
  }
}
        
