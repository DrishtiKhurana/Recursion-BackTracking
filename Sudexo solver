class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
        return;
     
    }


     public boolean solve(char[][] board) {
        for(int i = 0; i < 9; i++) {
            for(int j = 0; j < 9; j++) {
                if(board[i][j] == '.') {
                    for(char val = '1'; val <= '9'; val++) {
                        char c = val;
                        if(isValid(board, i, j, c)) {
                            board[i][j] = c;
                            if(solve(board)) {
                                return true;
                            }
                            else 
                                board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
        
    }


    public boolean isValid(char[][]chess,int x,int y,char value ){
     for(int j=0;j<chess[0].length;j++){
         if(chess[x][j]==value){
             return false;
         }
     }
    
       for(int i=0;i<chess.length;i++){
         if(chess[i][y]==value){
             return false;
         }
     }

int smi=x/3*3;
int smj=y/3*3;
        for(int i=0;i<3;i++){
         
         for(int j=0;j<3;j++){
if(chess[i+smi][j+smj]==value){
             return false;
         }

         }
     }
return true;
    }
}
